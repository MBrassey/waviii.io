{"ast":null,"code":"'use strict';\n\nvar multiaddr = require('multiaddr');\n/*\n * Valid combinations\n */\n\n\nvar DNS4 = base('dns4');\nvar DNS6 = base('dns6');\nvar DNS = or(base('dns'), base('dnsaddr'), DNS4, DNS6);\nvar IP = or(base('ip4'), base('ip6'));\nvar TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nvar UDP = and(IP, base('udp'));\nvar UTP = and(UDP, base('utp'));\nvar WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nvar WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')));\nvar HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nvar HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nvar WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nvar WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nvar WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nvar Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP); // Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\n\nvar Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\n\nvar _P2P = or(and(Reliable, base('p2p')), WebRTCStar, base('p2p'));\n\nvar _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\n\nvar CircuitRecursive = function CircuitRecursive() {\n  return or(and(_Circuit, CircuitRecursive), _Circuit);\n};\n\nvar Circuit = CircuitRecursive();\nvar P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexports.DNS = DNS;\nexports.DNS4 = DNS4;\nexports.DNS6 = DNS6;\nexports.IP = IP;\nexports.TCP = TCP;\nexports.UDP = UDP;\nexports.UTP = UTP;\nexports.HTTP = HTTP;\nexports.HTTPS = HTTPS;\nexports.WebSockets = WebSockets;\nexports.WebSocketsSecure = WebSocketsSecure;\nexports.WebSocketStar = WebSocketStar;\nexports.WebRTCStar = WebRTCStar;\nexports.WebRTCDirect = WebRTCDirect;\nexports.Reliable = Reliable;\nexports.Stardust = Stardust;\nexports.Circuit = Circuit;\nexports.P2P = P2P;\nexports.IPFS = P2P;\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction(partialMatch) {\n  return function matches(a) {\n    if (!multiaddr.isMultiaddr(a)) {\n      try {\n        a = multiaddr(a);\n      } catch (err) {\n        // catch error\n        return false; // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    var out = partialMatch(a.protoNames());\n\n    if (out === null) {\n      return false;\n    }\n\n    return out.length === 0;\n  };\n}\n\nfunction and() {\n  var args = Array.from(arguments);\n\n  function partialMatch(a) {\n    if (a.length < args.length) {\n      return null;\n    }\n\n    args.some(function (arg) {\n      a = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n\n      if (a === null) {\n        return true;\n      }\n    });\n    return a;\n  }\n\n  return {\n    toString: function toString() {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  };\n}\n\nfunction or() {\n  var args = Array.from(arguments);\n\n  function partialMatch(a) {\n    var out = null;\n    args.some(function (arg) {\n      var res = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n\n      if (res) {\n        out = res;\n        return true;\n      }\n    });\n    return out;\n  }\n\n  var result = {\n    toString: function toString() {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  };\n  return result;\n}\n\nfunction base(n) {\n  var name = n;\n\n  function matches(a) {\n    if (typeof a === 'string') {\n      try {\n        a = multiaddr(a);\n      } catch (err) {\n        // catch error\n        return false; // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    var pnames = a.protoNames();\n\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function partialMatch(protos) {\n    if (protos.length === 0) {\n      return null;\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1);\n    }\n\n    return null;\n  }\n\n  return {\n    toString: function toString() {\n      return name;\n    },\n    matches: matches,\n    partialMatch: partialMatch\n  };\n}","map":{"version":3,"sources":["/home/luc1d/Code/Github/waviii.io/node_modules/mafmt/src/index.js"],"names":["multiaddr","require","DNS4","base","DNS6","DNS","or","IP","TCP","and","UDP","UTP","WebSockets","WebSocketsSecure","HTTP","HTTPS","WebRTCStar","WebSocketStar","WebRTCDirect","Reliable","Stardust","_P2P","_Circuit","CircuitRecursive","Circuit","P2P","exports","IPFS","makeMatchesFunction","partialMatch","matches","a","isMultiaddr","err","out","protoNames","length","args","Array","from","arguments","some","arg","toString","join","input","res","result","n","name","pnames","protos","slice"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multiaddr = require('multiaddr')\n\n/*\n * Valid combinations\n */\nconst DNS4 = base('dns4')\nconst DNS6 = base('dns6')\nconst DNS = or(\n  base('dns'),\n  base('dnsaddr'),\n  DNS4,\n  DNS6\n)\n\nconst IP = or(base('ip4'), base('ip6'))\nconst TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nconst UDP = and(IP, base('udp'))\nconst UTP = and(UDP, base('utp'))\n\nconst WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nconst WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss'))\n)\n\nconst HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nconst HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst WebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nconst WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\nconst WebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nconst Reliable = or(\n  WebSockets,\n  WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  WebRTCStar,\n  WebRTCDirect,\n  TCP,\n  UTP\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nconst Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  WebRTCStar,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = () => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nconst Circuit = CircuitRecursive()\n\nconst P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nexports.DNS = DNS\nexports.DNS4 = DNS4\nexports.DNS6 = DNS6\nexports.IP = IP\nexports.TCP = TCP\nexports.UDP = UDP\nexports.UTP = UTP\nexports.HTTP = HTTP\nexports.HTTPS = HTTPS\nexports.WebSockets = WebSockets\nexports.WebSocketsSecure = WebSocketsSecure\nexports.WebSocketStar = WebSocketStar\nexports.WebRTCStar = WebRTCStar\nexports.WebRTCDirect = WebRTCDirect\nexports.Reliable = Reliable\nexports.Stardust = Stardust\nexports.Circuit = Circuit\nexports.P2P = P2P\nexports.IPFS = P2P\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction (partialMatch) {\n  return function matches (a) {\n    if (!multiaddr.isMultiaddr(a)) {\n      try {\n        a = multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n    const out = partialMatch(a.protoNames())\n    if (out === null) {\n      return false\n    }\n    return out.length === 0\n  }\n}\n\nfunction and () {\n  const args = Array.from(arguments)\n  function partialMatch (a) {\n    if (a.length < args.length) {\n      return null\n    }\n    args.some((arg) => {\n      a = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (a === null) {\n        return true\n      }\n    })\n\n    return a\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n}\n\nfunction or () {\n  const args = Array.from(arguments)\n\n  function partialMatch (a) {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res) {\n        out = res\n        return true\n      }\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n\n  return result\n}\n\nfunction base (n) {\n  const name = n\n\n  function matches (a) {\n    if (typeof a === 'string') {\n      try {\n        a = multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    const pnames = a.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  function partialMatch (protos) {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches: matches,\n    partialMatch: partialMatch\n  }\n}\n"]},"metadata":{},"sourceType":"script"}