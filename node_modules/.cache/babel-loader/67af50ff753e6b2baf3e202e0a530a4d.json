{"ast":null,"code":"/* eslint-disable guard-for-in */\n\n/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar multibase = require('multibase');\n\nvar varint = require('varint');\n\nvar _require2 = require('./constants'),\n    names = _require2.names;\n\nvar codes = {};\n\nfor (var key in names) {\n  codes[names[key]] = key;\n}\n\nexports.names = names;\nexports.codes = Object.freeze(codes);\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\n\nexports.toHexString = function toHexString(hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer');\n  }\n\n  return hash.toString('hex');\n};\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\n\n\nexports.fromHexString = function fromHexString(hash) {\n  return Buffer.from(hash, 'hex');\n};\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\n\n\nexports.toB58String = function toB58String(hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer');\n  }\n\n  return multibase.encode('base58btc', hash).toString().slice(1);\n};\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Buffer} hash\n * @returns {Buffer}\n */\n\n\nexports.fromB58String = function fromB58String(hash) {\n  var encoded = hash;\n\n  if (Buffer.isBuffer(hash)) {\n    encoded = hash.toString();\n  }\n\n  return multibase.decode('z' + encoded);\n};\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Buffer} buf\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\n\n\nexports.decode = function decode(buf) {\n  if (!Buffer.isBuffer(buf)) {\n    throw new Error('multihash must be a Buffer');\n  }\n\n  if (buf.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.');\n  }\n\n  var code = varint.decode(buf);\n\n  if (!exports.isValidCode(code)) {\n    throw new Error(\"multihash unknown function code: 0x\".concat(code.toString(16)));\n  }\n\n  buf = buf.slice(varint.decode.bytes);\n  var len = varint.decode(buf);\n\n  if (len < 0) {\n    throw new Error(\"multihash invalid length: \".concat(len));\n  }\n\n  buf = buf.slice(varint.decode.bytes);\n\n  if (buf.length !== len) {\n    throw new Error(\"multihash length inconsistent: 0x\".concat(buf.toString('hex')));\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: buf\n  };\n};\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Buffer} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\n\n\nexports.encode = function encode(digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code');\n  } // ensure it's a hashfunction code.\n\n\n  var hashfn = exports.coerceCode(code);\n\n  if (!Buffer.isBuffer(digest)) {\n    throw new Error('digest should be a Buffer');\n  }\n\n  if (length == null) {\n    length = digest.length;\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.');\n  }\n\n  return Buffer.concat([Buffer.from(varint.encode(hashfn)), Buffer.from(varint.encode(length)), digest]);\n};\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\n\n\nexports.coerceCode = function coerceCode(name) {\n  var code = name;\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(\"Unrecognized hash function named: \".concat(name));\n    }\n\n    code = names[name];\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(\"Hash function code should be a number. Got: \".concat(code));\n  }\n\n  if (codes[code] === undefined && !exports.isAppCode(code)) {\n    throw new Error(\"Unrecognized function code: \".concat(code));\n  }\n\n  return code;\n};\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\n\n\nexports.isAppCode = function appCode(code) {\n  return code > 0 && code < 0x10;\n};\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\n\n\nexports.isValidCode = function validCode(code) {\n  if (exports.isAppCode(code)) {\n    return true;\n  }\n\n  if (codes[code]) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\n\n\nfunction validate(multihash) {\n  exports.decode(multihash); // throws if bad.\n}\n\nexports.validate = validate;\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\n\nexports.prefix = function prefix(multihash) {\n  validate(multihash);\n  return multihash.slice(0, 2);\n};","map":{"version":3,"sources":["/home/luc1d/Code/Github/waviii.io/node_modules/multiaddr/node_modules/multihashes/src/index.js"],"names":["require","Buffer","multibase","varint","names","codes","key","exports","Object","freeze","toHexString","hash","isBuffer","Error","toString","fromHexString","from","toB58String","encode","slice","fromB58String","encoded","decode","buf","length","code","isValidCode","bytes","len","name","digest","undefined","hashfn","coerceCode","concat","isAppCode","appCode","validCode","validate","multihash","prefix"],"mappings":"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","sourcesContent":["/* eslint-disable guard-for-in */\n/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\n\nconst codes = {}\n\nfor (const key in names) {\n  codes[names[key]] = key\n}\nexports.names = names\nexports.codes = Object.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toHexString = function toHexString (hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return hash.toString('hex')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\nexports.fromHexString = function fromHexString (hash) {\n  return Buffer.from(hash, 'hex')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toB58String = function toB58String (hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return multibase.encode('base58btc', hash).toString().slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Buffer} hash\n * @returns {Buffer}\n */\nexports.fromB58String = function fromB58String (hash) {\n  let encoded = hash\n  if (Buffer.isBuffer(hash)) {\n    encoded = hash.toString()\n  }\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Buffer} buf\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\nexports.decode = function decode (buf) {\n  if (!(Buffer.isBuffer(buf))) {\n    throw new Error('multihash must be a Buffer')\n  }\n\n  if (buf.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = varint.decode(buf)\n  if (!exports.isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  const len = varint.decode(buf)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: buf\n  }\n}\n\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Buffer} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\nexports.encode = function encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code)\n\n  if (!(Buffer.isBuffer(digest))) {\n    throw new Error('digest should be a Buffer')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  return Buffer.concat([\n    Buffer.from(varint.encode(hashfn)),\n    Buffer.from(varint.encode(length)),\n    digest\n  ])\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\nexports.coerceCode = function coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  if (codes[code] === undefined && !exports.isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isAppCode = function appCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isValidCode = function validCode (code) {\n  if (exports.isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  exports.decode(multihash) // throws if bad.\n}\nexports.validate = validate\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nexports.prefix = function prefix (multihash) {\n  validate(multihash)\n\n  return multihash.slice(0, 2)\n}\n"]},"metadata":{},"sourceType":"script"}