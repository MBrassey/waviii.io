{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar convert = require('./convert');\n\nvar protocols = require('./protocols-table');\n\nvar varint = require('varint'); // export codec\n\n\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n  bufferToTuples,\n  tuplesToBuffer,\n  bufferToString,\n  stringToBuffer,\n  fromString,\n  fromBuffer,\n  validateBuffer,\n  isValidBuffer,\n  cleanPath,\n  ParseError,\n  protoFromTuple,\n  sizeForAddr\n}; // string -> [[str name, str addr]... ]\n\nfunction stringToStringTuples(str) {\n  var tuples = [];\n  var parts = str.split('/').slice(1); // skip first empty elem\n\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n\n  for (var p = 0; p < parts.length; p++) {\n    var part = parts[p];\n    var proto = protocols(part);\n\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n\n    p++; // advance addr part\n\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    } // if it's a path proto, take the rest\n\n\n    if (proto.path) {\n      tuples.push([part, // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n\n    tuples.push([part, parts[p]]);\n  }\n\n  return tuples;\n} // [[str name, str addr]... ] -> string\n\n\nfunction stringTuplesToString(tuples) {\n  var parts = [];\n  tuples.map(function (tup) {\n    var proto = protoFromTuple(tup);\n    parts.push(proto.name);\n\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n  });\n  return cleanPath(parts.join('/'));\n} // [[str name, str addr]... ] -> [[int code, Buffer]... ]\n\n\nfunction stringTuplesToTuples(tuples) {\n  return tuples.map(function (tup) {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n\n    var proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n} // [[int code, Buffer]... ] -> [[str name, str addr]... ]\n\n\nfunction tuplesToStringTuples(tuples) {\n  return tuples.map(function (tup) {\n    var proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n} // [[int code, Buffer ]... ] -> Buffer\n\n\nfunction tuplesToBuffer(tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(function (tup) {\n    var proto = protoFromTuple(tup);\n    var buf = Buffer.from(varint.encode(proto.code));\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    var size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n} // Buffer -> [[int code, Buffer ]... ]\n\n\nfunction bufferToTuples(buf) {\n  var tuples = [];\n  var i = 0;\n\n  while (i < buf.length) {\n    var code = varint.decode(buf, i);\n    var n = varint.decode.bytes;\n    var p = protocols(code);\n    var size = sizeForAddr(p, buf.slice(i + n));\n\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n\n    var addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'));\n    } // ok, tuple seems good.\n\n\n    tuples.push([code, addr]);\n  }\n\n  return tuples;\n} // Buffer -> String\n\n\nfunction bufferToString(buf) {\n  var a = bufferToTuples(buf);\n  var b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n} // String -> Buffer\n\n\nfunction stringToBuffer(str) {\n  str = cleanPath(str);\n  var a = stringToStringTuples(str);\n  var b = stringTuplesToTuples(a);\n  return tuplesToBuffer(b);\n} // String -> Buffer\n\n\nfunction fromString(str) {\n  return stringToBuffer(str);\n} // Buffer -> Buffer\n\n\nfunction fromBuffer(buf) {\n  var err = validateBuffer(buf);\n  if (err) throw err;\n  return Buffer.from(buf); // copy\n}\n\nfunction validateBuffer(buf) {\n  try {\n    bufferToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\n\nfunction isValidBuffer(buf) {\n  return validateBuffer(buf) === undefined;\n}\n\nfunction cleanPath(str) {\n  return '/' + str.trim().split('/').filter(function (a) {\n    return a;\n  }).join('/');\n}\n\nfunction ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\n\nfunction protoFromTuple(tup) {\n  var proto = protocols(tup[0]);\n  return proto;\n}","map":{"version":3,"sources":["/home/luc1d/Code/Github/waviii.io/node_modules/multiaddr/src/codec.js"],"names":["require","Buffer","convert","protocols","varint","module","exports","stringToStringTuples","stringTuplesToString","tuplesToStringTuples","stringTuplesToTuples","bufferToTuples","tuplesToBuffer","bufferToString","stringToBuffer","fromString","fromBuffer","validateBuffer","isValidBuffer","cleanPath","ParseError","protoFromTuple","sizeForAddr","str","tuples","parts","split","slice","length","p","part","proto","size","push","path","join","map","tup","name","Array","isArray","code","toBuffer","toString","concat","buf","from","encode","addr","decode","bytes","i","n","a","b","err","undefined","trim","filter","Error"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n\n  bufferToTuples,\n  tuplesToBuffer,\n\n  bufferToString,\n  stringToBuffer,\n\n  fromString,\n  fromBuffer,\n  validateBuffer,\n  isValidBuffer,\n  cleanPath,\n\n  ParseError,\n  protoFromTuple,\n\n  sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString (tuples) {\n  const parts = []\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nfunction tuplesToBuffer (tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    let buf = Buffer.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nfunction bufferToTuples (buf) {\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Buffer -> String\nfunction bufferToString (buf) {\n  const a = bufferToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Buffer\nfunction stringToBuffer (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBuffer(b)\n}\n\n// String -> Buffer\nfunction fromString (str) {\n  return stringToBuffer(str)\n}\n\n// Buffer -> Buffer\nfunction fromBuffer (buf) {\n  const err = validateBuffer(buf)\n  if (err) throw err\n  return Buffer.from(buf) // copy\n}\n\nfunction validateBuffer (buf) {\n  try {\n    bufferToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nfunction isValidBuffer (buf) {\n  return validateBuffer(buf) === undefined\n}\n\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/')\n}\n\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n"]},"metadata":{},"sourceType":"script"}