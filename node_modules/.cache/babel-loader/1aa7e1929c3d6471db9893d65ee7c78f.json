{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/home/luc1d/Code/Github/waviii.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/luc1d/Code/Github/waviii.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/luc1d/Code/Github/waviii.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar Base = /*#__PURE__*/function () {\n  function Base(name, code, implementation, alphabet) {\n    _classCallCheck(this, Base);\n\n    this.name = name;\n    this.code = code;\n    this.codeBuf = Buffer.from(this.code);\n    this.alphabet = alphabet;\n    this.engine = implementation(alphabet);\n  }\n\n  _createClass(Base, [{\n    key: \"encode\",\n    value: function encode(buf) {\n      return this.engine.encode(buf);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(string) {\n      var _iterator = _createForOfIteratorHelper(string),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n\n          if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n            throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this.engine.decode(string);\n    }\n  }]);\n\n  return Base;\n}();\n\nmodule.exports = Base;","map":{"version":3,"sources":["/home/luc1d/Code/Github/waviii.io/node_modules/multiaddr/node_modules/multihashes/node_modules/multibase/src/base.js"],"names":["require","Buffer","Base","name","code","implementation","alphabet","codeBuf","from","engine","buf","encode","string","char","indexOf","Error","decode","module","exports"],"mappings":"AAAA;;;;;;;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;IAEFC,I;AACJ,gBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,cAAzB,EAAyCC,QAAzC,EAAmD;AAAA;;AACjD,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKG,OAAL,GAAeN,MAAM,CAACO,IAAP,CAAY,KAAKJ,IAAjB,CAAf;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKG,MAAL,GAAcJ,cAAc,CAACC,QAAD,CAA5B;AACD;;;;2BAEOI,G,EAAK;AACX,aAAO,KAAKD,MAAL,CAAYE,MAAZ,CAAmBD,GAAnB,CAAP;AACD;;;2BAEOE,M,EAAQ;AAAA,iDACKA,MADL;AAAA;;AAAA;AACd,4DAA2B;AAAA,cAAhBC,IAAgB;;AACzB,cAAI,KAAKP,QAAL,IAAiB,KAAKA,QAAL,CAAcQ,OAAd,CAAsBD,IAAtB,IAA8B,CAAnD,EAAsD;AACpD,kBAAM,IAAIE,KAAJ,8BAAgCF,IAAhC,mBAA6CD,MAA7C,OAAN;AACD;AACF;AALa;AAAA;AAAA;AAAA;AAAA;;AAMd,aAAO,KAAKH,MAAL,CAAYO,MAAZ,CAAmBJ,MAAnB,CAAP;AACD;;;;;;AAGHK,MAAM,CAACC,OAAP,GAAiBhB,IAAjB","sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\n\nclass Base {\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = Buffer.from(this.code)\n    this.alphabet = alphabet\n    this.engine = implementation(alphabet)\n  }\n\n  encode (buf) {\n    return this.engine.encode(buf)\n  }\n\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.engine.decode(string)\n  }\n}\n\nmodule.exports = Base\n"]},"metadata":{},"sourceType":"script"}